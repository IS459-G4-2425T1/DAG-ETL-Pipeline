{
  "Comment": "State Machine for Glue Jobs and Parallel Athena Queries",
  "StartAt": "Start Reading Data Job",
  "States": {
    "Start Reading Data Job": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:glue:startJobRun",
      "Parameters": {
        "JobName": "reading data"
      },
      "ResultPath": "$.ReadingDataJob",
      "Next": "Check Reading Data Job Status"
    },
    "Check Reading Data Job Status": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:glue:getJobRun",
      "Parameters": {
        "JobName": "reading data",
        "RunId.$": "$.ReadingDataJob.JobRunId"
      },
      "ResultPath": "$.ReadingDataJobStatus",
      "Next": "Is Reading Data Job Complete?"
    },
    "Is Reading Data Job Complete?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.ReadingDataJobStatus.JobRun.JobRunState",
          "StringEquals": "SUCCEEDED",
          "Next": "Check First S3 Objects Uploaded"
        },
        {
          "Variable": "$.ReadingDataJobStatus.JobRun.JobRunState",
          "StringEquals": "FAILED",
          "Next": "Reading Data Job Failed"
        }
      ],
      "Default": "Wait Before Checking Reading Data Job Status Again"
    },
    "Wait Before Checking Reading Data Job Status Again": {
      "Type": "Wait",
      "Seconds": 180,
      "Next": "Check Reading Data Job Status"
    },
    "Reading Data Job Failed": {
      "Type": "Fail",
      "Error": "ReadingDataJobFailed",
      "Cause": "Reading Data Job failed."
    },
    "Check First S3 Objects Uploaded": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:s3:listObjectsV2",
      "Parameters": {
        "Bucket": "airtime-historical-data",
        "Prefix": "write/airline.csv.shuffle/"
      },
      "ResultPath": "$.FirstS3List",
      "Next": "Are First S3 Objects Available?"
    },
    "Are First S3 Objects Available?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.FirstS3List.KeyCount",
          "NumericGreaterThan": 0,
          "Next": "Start Airtime Historical Crawler Job"
        }
      ],
      "Default": "Wait Before Checking First S3 Objects Again"
    },
    "Wait Before Checking First S3 Objects Again": {
      "Type": "Wait",
      "Seconds": 30,
      "Next": "Check First S3 Objects Uploaded"
    },
    "Start Airtime Historical Crawler Job": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:glue:startCrawler",
      "Parameters": {
        "Name": "airtime-historical-crawler"
      },
      "ResultPath": "$.CrawlerJob",
      "Next": "Wait Before Checking Crawler Job Status"
    },
    "Wait Before Checking Crawler Job Status": {
      "Type": "Wait",
      "Seconds": 30,
      "Next": "Check Crawler Job Status"
    },
    "Check Crawler Job Status": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:glue:getCrawler",
      "Parameters": {
        "Name": "airtime-historical-crawler"
      },
      "ResultPath": "$.CrawlerStatus",
      "Next": "Is Crawler Job Complete?"
    },
    "Is Crawler Job Complete?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.CrawlerStatus.Crawler.State",
          "StringEquals": "READY",
          "Next": "Start Airline Historic ETL Pipeline1 Job"
        }
      ],
      "Default": "Wait Before Checking Crawler Job Status Again"
    },
    "Wait Before Checking Crawler Job Status Again": {
      "Type": "Wait",
      "Seconds": 60,
      "Next": "Check Crawler Job Status"
    },
    "Start Airline Historic ETL Pipeline1 Job": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:glue:startJobRun",
      "Parameters": {
        "JobName": "airline-historic-etl-pipeline1-script-version"
      },
      "ResultPath": "$.AirlineHistoricETLJob",
      "Next": "Check Airline Historic ETL Job Status"
    },
    "Check Airline Historic ETL Job Status": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:glue:getJobRun",
      "Parameters": {
        "JobName": "airline-historic-etl-pipeline1-script-version",
        "RunId.$": "$.AirlineHistoricETLJob.JobRunId"
      },
      "ResultPath": "$.AirlineHistoricETLJobStatus",
      "Next": "Is Airline Historic ETL Job Complete?"
    },
    "Is Airline Historic ETL Job Complete?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.AirlineHistoricETLJobStatus.JobRun.JobRunState",
          "StringEquals": "SUCCEEDED",
          "Next": "Check Second S3 Objects Uploaded"
        },
        {
          "Variable": "$.AirlineHistoricETLJobStatus.JobRun.JobRunState",
          "StringEquals": "FAILED",
          "Next": "Airline Historic ETL Job Failed"
        }
      ],
      "Default": "Wait Before Checking Airline Historic ETL Job Status Again"
    },
    "Wait Before Checking Airline Historic ETL Job Status Again": {
      "Type": "Wait",
      "Seconds": 480,
      "Next": "Check Airline Historic ETL Job Status"
    },
    "Airline Historic ETL Job Failed": {
      "Type": "Fail",
      "Error": "AirlineHistoricETLJobFailed",
      "Cause": "Airline Historic ETL Job failed."
    },
    "Check Second S3 Objects Uploaded": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:s3:listObjectsV2",
      "Parameters": {
        "Bucket": "airtime-historical-data",
        "Prefix": "clean/pipeline-1/run-"
      },
      "ResultPath": "$.SecondS3List",
      "Next": "Are Second S3 Objects Available?"
    },
    "Are Second S3 Objects Available?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.SecondS3List.KeyCount",
          "NumericGreaterThan": 0,
          "Next": "Start Pipeline-1-FE Job"
        }
      ],
      "Default": "Wait Before Checking Second S3 Objects Again"
    },
    "Wait Before Checking Second S3 Objects Again": {
      "Type": "Wait",
      "Seconds": 30,
      "Next": "Check Second S3 Objects Uploaded"
    },
    "Start Pipeline-1-FE Job": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:glue:startJobRun",
      "Parameters": {
        "JobName": "pipeline-1-FE"
      },
      "ResultPath": "$.Pipeline1FEJob",
      "Next": "Check Pipeline-1-FE Job Status"
    },
    "Check Pipeline-1-FE Job Status": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:glue:getJobRun",
      "Parameters": {
        "JobName": "pipeline-1-FE",
        "RunId.$": "$.Pipeline1FEJob.JobRunId"
      },
      "ResultPath": "$.Pipeline1FEJobStatus",
      "Next": "Is Pipeline-1-FE Job Complete?"
    },
    "Is Pipeline-1-FE Job Complete?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.Pipeline1FEJobStatus.JobRun.JobRunState",
          "StringEquals": "SUCCEEDED",
          "Next": "Check Third S3 Objects Uploaded"
        },
        {
          "Variable": "$.Pipeline1FEJobStatus.JobRun.JobRunState",
          "StringEquals": "FAILED",
          "Next": "Pipeline-1-FE Job Failed"
        }
      ],
      "Default": "Wait Before Checking Pipeline-1-FE Job Status Again"
    },
    "Wait Before Checking Pipeline-1-FE Job Status Again": {
      "Type": "Wait",
      "Seconds": 240,
      "Next": "Check Pipeline-1-FE Job Status"
    },
    "Pipeline-1-FE Job Failed": {
      "Type": "Fail",
      "Error": "Pipeline1FEJobFailed",
      "Cause": "Pipeline-1-FE Job failed."
    },
    "Check Third S3 Objects Uploaded": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:s3:listObjectsV2",
      "Parameters": {
        "Bucket": "pipeline1-data-storage",
        "Prefix": "processed-data/df/part-"
      },
      "ResultPath": "$.ThirdS3List",
      "Next": "Are Third S3 Objects Available?"
    },
    "Are Third S3 Objects Available?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.ThirdS3List.KeyCount",
          "NumericGreaterThan": 0,
          "Next": "Run Athena Queries in Parallel"
        }
      ],
      "Default": "Wait Before Checking Third S3 Objects Again"
    },
    "Wait Before Checking Third S3 Objects Again": {
      "Type": "Wait",
      "Seconds": 30,
      "Next": "Check Third S3 Objects Uploaded"
    },
    "Run Athena Queries in Parallel": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "Run Athena Query 1",
          "States": {
            "Run Athena Query 1": {
              "Type": "Task",
              "Resource": "arn:aws:states:::athena:startQueryExecution",
              "Parameters": {
                "QueryString": "CREATE OR REPLACE VIEW seasonal_delay_severity AS\nSELECT \n    season,\n    SUM(CASE WHEN severity = 'Minimal' THEN 1 ELSE 0 END) AS Minimal_Delays,\n    SUM(CASE WHEN severity = 'Moderate' THEN 1 ELSE 0 END) AS Moderate_Delays,\n    SUM(CASE WHEN severity = 'Major' THEN 1 ELSE 0 END) AS Major_Delays,\n    SUM(CASE WHEN severity = 'Significant' THEN 1 ELSE 0 END) AS Significant_Delays,\n    SUM(CASE WHEN severity = 'Severe' THEN 1 ELSE 0 END) AS Severe_Delays\nFROM \n    df\nGROUP BY \n    season\nORDER BY \n    season;",
                "WorkGroup": "pipeline1",
                "QueryExecutionContext": {
                  "Catalog": "AwsDataCatalog",
                  "Database": "pipeline1-database"
                },
                "ResultConfiguration": {
                  "OutputLocation": "s3://airtime-historical-data/pipeline-1-athena/"
                }
              },
              "ResultSelector": {
                "QueryExecutionId.$": "$.QueryExecutionId"
              },
              "ResultPath": "$.AthenaQuery1Result",
              "Next": "Check Athena Query 1 Status"
            },
            "Check Athena Query 1 Status": {
              "Type": "Task",
              "Resource": "arn:aws:states:::athena:getQueryExecution",
              "Parameters": {
                "QueryExecutionId.$": "$.AthenaQuery1Result.QueryExecutionId"
              },
              "ResultPath": "$.AthenaQuery1Status",
              "Next": "Is Athena Query 1 Complete?"
            },
            "Is Athena Query 1 Complete?": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.AthenaQuery1Status.QueryExecution.Status.State",
                  "StringEquals": "SUCCEEDED",
                  "Next": "Athena Query 1 Complete"
                },
                {
                  "Variable": "$.AthenaQuery1Status.QueryExecution.Status.State",
                  "StringEquals": "FAILED",
                  "Next": "Athena Query 1 Failed"
                }
              ],
              "Default": "Wait Before Checking Athena Query 1 Status Again"
            },
            "Wait Before Checking Athena Query 1 Status Again": {
              "Type": "Wait",
              "Seconds": 10,
              "Next": "Check Athena Query 1 Status"
            },
            "Athena Query 1 Failed": {
              "Type": "Fail",
              "Error": "AthenaQuery1Failed",
              "Cause": "Athena Query 1 execution failed."
            },
            "Athena Query 1 Complete": {
              "Type": "Succeed"
            }
          }
        },
        {
          "StartAt": "Run Athena Query 2",
          "States": {
            "Run Athena Query 2": {
              "Type": "Task",
              "Resource": "arn:aws:states:::athena:startQueryExecution",
              "Parameters": {
                "QueryString": "CREATE OR REPLACE VIEW yearly_total_delays AS\nSELECT \n    year,\n    SUM(CASE WHEN carrierdelay > 0 THEN 1 ELSE 0 END) AS Carrier_Delay,\n    SUM(CASE WHEN weatherdelay > 0 THEN 1 ELSE 0 END) AS Weather_Delay,\n    SUM(CASE WHEN nasdelay > 0 THEN 1 ELSE 0 END) AS NAS_Delay,\n    SUM(CASE WHEN securitydelay > 0 THEN 1 ELSE 0 END) AS Security_Delay,\n    SUM(CASE WHEN lateaircraftdelay > 0 THEN 1 ELSE 0 END) AS Late_Aircraft_Delay,\n\n    SUM(CASE WHEN carrierdelay > 0 THEN 1 ELSE 0 END) + \n    SUM(CASE WHEN weatherdelay > 0 THEN 1 ELSE 0 END) + \n    SUM(CASE WHEN nasdelay > 0 THEN 1 ELSE 0 END) + \n    SUM(CASE WHEN securitydelay > 0 THEN 1 ELSE 0 END) + \n    SUM(CASE WHEN lateaircraftdelay > 0 THEN 1 ELSE 0 END) AS Total_Delays\nFROM \n    df\nGROUP BY \n    year\nORDER BY \n    year;",
                "WorkGroup": "pipeline1",
                "QueryExecutionContext": {
                  "Catalog": "AwsDataCatalog",
                  "Database": "pipeline1-database"
                },
                "ResultConfiguration": {
                  "OutputLocation": "s3://airtime-historical-data/pipeline-1-athena/"
                }
              },
              "ResultSelector": {
                "QueryExecutionId.$": "$.QueryExecutionId"
              },
              "ResultPath": "$.AthenaQuery2Result",
              "Next": "Check Athena Query 2 Status"
            },
            "Check Athena Query 2 Status": {
              "Type": "Task",
              "Resource": "arn:aws:states:::athena:getQueryExecution",
              "Parameters": {
                "QueryExecutionId.$": "$.AthenaQuery3Result.QueryExecutionId"
              },
              "ResultPath": "$.AthenaQuery3Status",
              "Next": "Is Athena Query 2 Complete?"
            },
            "Is Athena Query 2 Complete?": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.AthenaQuery3Status.QueryExecution.Status.State",
                  "StringEquals": "SUCCEEDED",
                  "Next": "Athena Query 2 Complete"
                },
                {
                  "Variable": "$.AthenaQuery3Status.QueryExecution.Status.State",
                  "StringEquals": "FAILED",
                  "Next": "Athena Query 2 Failed"
                }
              ],
              "Default": "Wait Before Checking Athena Query 2 Status Again"
            },
            "Wait Before Checking Athena Query 2 Status Again": {
              "Type": "Wait",
              "Seconds": 10,
              "Next": "Check Athena Query 2 Status"
            },
            "Athena Query 2 Failed": {
              "Type": "Fail",
              "Error": "AthenaQuery3Failed",
              "Cause": "Athena Query 2 execution failed."
            },
            "Athena Query 2 Complete": {
              "Type": "Succeed"
            }
          }
        },
        {
          "StartAt": "Run Athena Query 3",
          "States": {
            "Run Athena Query 3": {
              "Type": "Task",
              "Resource": "arn:aws:states:::athena:startQueryExecution",
              "Parameters": {
                "QueryString": "CREATE OR REPLACE VIEW monthly_total_delay AS\nSELECT \n    month,\n    SUM(CASE WHEN carrierdelay > 0 THEN 1 ELSE 0 END) AS Carrier_Delay,\n    SUM(CASE WHEN weatherdelay > 0 THEN 1 ELSE 0 END) AS Weather_Delay,\n    SUM(CASE WHEN nasdelay > 0 THEN 1 ELSE 0 END) AS NAS_Delay,\n    SUM(CASE WHEN securitydelay > 0 THEN 1 ELSE 0 END) AS Security_Delay,\n    SUM(CASE WHEN lateaircraftdelay > 0 THEN 1 ELSE 0 END) AS Late_Aircraft_Delay,\n    SUM(CASE WHEN carrierdelay > 0 THEN 1 ELSE 0 END) + \n    SUM(CASE WHEN weatherdelay > 0 THEN 1 ELSE 0 END) + \n    SUM(CASE WHEN nasdelay > 0 THEN 1 ELSE 0 END) + \n    SUM(CASE WHEN securitydelay > 0 THEN 1 ELSE 0 END) + \n    SUM(CASE WHEN lateaircraftdelay > 0 THEN 1 ELSE 0 END) AS Total_Delays\nFROM \n    df\nGROUP BY \n    month\nORDER BY \n    month;",
                "WorkGroup": "pipeline1",
                "QueryExecutionContext": {
                  "Catalog": "AwsDataCatalog",
                  "Database": "pipeline1-database"
                },
                "ResultConfiguration": {
                  "OutputLocation": "s3://airtime-historical-data/pipeline-1-athena/"
                }
              },
              "ResultSelector": {
                "QueryExecutionId.$": "$.QueryExecutionId"
              },
              "ResultPath": "$.AthenaQuery3Result",
              "Next": "Check Athena Query 3 Status"
            },
            "Check Athena Query 3 Status": {
              "Type": "Task",
              "Resource": "arn:aws:states:::athena:getQueryExecution",
              "Parameters": {
                "QueryExecutionId.$": "$.AthenaQuery4Result.QueryExecutionId"
              },
              "ResultPath": "$.AthenaQuery4Status",
              "Next": "Is Athena Query 3 Complete?"
            },
            "Is Athena Query 3 Complete?": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.AthenaQuery4Status.QueryExecution.Status.State",
                  "StringEquals": "SUCCEEDED",
                  "Next": "Athena Query 3 Complete"
                },
                {
                  "Variable": "$.AthenaQuery4Status.QueryExecution.Status.State",
                  "StringEquals": "FAILED",
                  "Next": "Athena Query 3 Failed"
                }
              ],
              "Default": "Wait Before Checking Athena Query 3 Status Again"
            },
            "Wait Before Checking Athena Query 3 Status Again": {
              "Type": "Wait",
              "Seconds": 10,
              "Next": "Check Athena Query 3 Status"
            },
            "Athena Query 3 Failed": {
              "Type": "Fail",
              "Error": "AthenaQuery4Failed",
              "Cause": "Athena Query 3 execution failed."
            },
            "Athena Query 3 Complete": {
              "Type": "Succeed"
            }
          }
        },
        {
          "StartAt": "Run Athena Query 4",
          "States": {
            "Run Athena Query 4": {
              "Type": "Task",
              "Resource": "arn:aws:states:::athena:startQueryExecution",
              "Parameters": {
                "QueryString": "CREATE OR REPLACE VIEW avg_delays_by_month AS\nSELECT \n    month,\n    AVG(depdelay) AS Avg_Total_Departure_Delay,\n    AVG(carrierdelay) AS Avg_Carrier_Delay,\n    AVG(weatherdelay) AS Avg_Weather_Delay,\n    AVG(nasdelay) AS Avg_NAS_Delay,\n    AVG(securitydelay) AS Avg_Security_Delay,\n    AVG(lateaircraftdelay) AS Avg_Late_Aircraft_Delay\nFROM \n    df\nGROUP BY \n    month\nORDER BY \n    month;",
                "WorkGroup": "pipeline1",
                "QueryExecutionContext": {
                  "Catalog": "AwsDataCatalog",
                  "Database": "pipeline1-database"
                },
                "ResultConfiguration": {
                  "OutputLocation": "s3://airtime-historical-data/pipeline-1-athena/"
                }
              },
              "ResultSelector": {
                "QueryExecutionId.$": "$.QueryExecutionId"
              },
              "ResultPath": "$.AthenaQuery5Result",
              "Next": "Check Athena Query 4 Status"
            },
            "Check Athena Query 4 Status": {
              "Type": "Task",
              "Resource": "arn:aws:states:::athena:getQueryExecution",
              "Parameters": {
                "QueryExecutionId.$": "$.AthenaQuery5Result.QueryExecutionId"
              },
              "ResultPath": "$.AthenaQuery5Status",
              "Next": "Is Athena Query 4 Complete?"
            },
            "Is Athena Query 4 Complete?": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.AthenaQuery5Status.QueryExecution.Status.State",
                  "StringEquals": "SUCCEEDED",
                  "Next": "Athena Query 4 Complete"
                },
                {
                  "Variable": "$.AthenaQuery5Status.QueryExecution.Status.State",
                  "StringEquals": "FAILED",
                  "Next": "Athena Query 4 Failed"
                }
              ],
              "Default": "Wait Before Checking Athena Query 4 Status Again"
            },
            "Wait Before Checking Athena Query 4 Status Again": {
              "Type": "Wait",
              "Seconds": 10,
              "Next": "Check Athena Query 4 Status"
            },
            "Athena Query 4 Failed": {
              "Type": "Fail",
              "Error": "AthenaQuery5Failed",
              "Cause": "Athena Query 4 execution failed."
            },
            "Athena Query 4 Complete": {
              "Type": "Succeed"
            }
          }
        },
        {
          "StartAt": "Run Athena Query 5",
          "States": {
            "Run Athena Query 5": {
              "Type": "Task",
              "Resource": "arn:aws:states:::athena:startQueryExecution",
              "Parameters": {
                "QueryString": "CREATE OR REPLACE VIEW weekly_total_delays AS\nSELECT \n    dayofweek,\n    SUM(CASE WHEN carrierdelay > 0 THEN 1 ELSE 0 END) AS Carrier_Delay_Count,\n    SUM(CASE WHEN weatherdelay > 0 THEN 1 ELSE 0 END) AS Weather_Delay_Count,\n    SUM(CASE WHEN nasdelay > 0 THEN 1 ELSE 0 END) AS NAS_Delay_Count,\n    SUM(CASE WHEN securitydelay > 0 THEN 1 ELSE 0 END) AS Security_Delay_Count,\n    SUM(CASE WHEN lateaircraftdelay > 0 THEN 1 ELSE 0 END) AS Late_Aircraft_Delay_Count,\n    SUM(\n        CASE WHEN carrierdelay > 0 THEN 1 ELSE 0 END +\n        CASE WHEN weatherdelay > 0 THEN 1 ELSE 0 END +\n        CASE WHEN nasdelay > 0 THEN 1 ELSE 0 END +\n        CASE WHEN securitydelay > 0 THEN 1 ELSE 0 END +\n        CASE WHEN lateaircraftdelay > 0 THEN 1 ELSE 0 END\n    ) AS Total_No_Delays\nFROM \n    df\nGROUP BY \n    dayofweek\nORDER BY \n    dayofweek;",
                "WorkGroup": "pipeline1",
                "QueryExecutionContext": {
                  "Catalog": "AwsDataCatalog",
                  "Database": "pipeline1-database"
                },
                "ResultConfiguration": {
                  "OutputLocation": "s3://airtime-historical-data/pipeline-1-athena/"
                }
              },
              "ResultSelector": {
                "QueryExecutionId.$": "$.QueryExecutionId"
              },
              "ResultPath": "$.AthenaQuery6Result",
              "Next": "Check Athena Query 5 Status"
            },
            "Check Athena Query 5 Status": {
              "Type": "Task",
              "Resource": "arn:aws:states:::athena:getQueryExecution",
              "Parameters": {
                "QueryExecutionId.$": "$.AthenaQuery6Result.QueryExecutionId"
              },
              "ResultPath": "$.AthenaQuery6Status",
              "Next": "Is Athena Query 5 Complete?"
            },
            "Is Athena Query 5 Complete?": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.AthenaQuery6Status.QueryExecution.Status.State",
                  "StringEquals": "SUCCEEDED",
                  "Next": "Athena Query 5 Complete"
                },
                {
                  "Variable": "$.AthenaQuery6Status.QueryExecution.Status.State",
                  "StringEquals": "FAILED",
                  "Next": "Athena Query 5 Failed"
                }
              ],
              "Default": "Wait Before Checking Athena Query 5 Status Again"
            },
            "Wait Before Checking Athena Query 5 Status Again": {
              "Type": "Wait",
              "Seconds": 10,
              "Next": "Check Athena Query 5 Status"
            },
            "Athena Query 5 Failed": {
              "Type": "Fail",
              "Error": "AthenaQuery6Failed",
              "Cause": "Athena Query 5 execution failed."
            },
            "Athena Query 5 Complete": {
              "Type": "Succeed"
            }
          }
        },
        {
          "StartAt": "Run Athena Query 6",
          "States": {
            "Run Athena Query 6": {
              "Type": "Task",
              "Resource": "arn:aws:states:::athena:startQueryExecution",
              "Parameters": {
                "QueryString": "CREATE OR REPLACE VIEW seasonal_total_delays AS\nSELECT \n    season,\n    SUM(CASE WHEN carrierdelay > 0 THEN 1 ELSE 0 END) AS Carrier_Delay,\n    SUM(CASE WHEN weatherdelay > 0 THEN 1 ELSE 0 END) AS Weather_Delay,\n    SUM(CASE WHEN nasdelay > 0 THEN 1 ELSE 0 END) AS NAS_Delay,\n    SUM(CASE WHEN securitydelay > 0 THEN 1 ELSE 0 END) AS Security_Delay,\n    SUM(CASE WHEN lateaircraftdelay > 0 THEN 1 ELSE 0 END) AS Late_Aircraft_Delay,\n    SUM(CASE WHEN carrierdelay > 0 THEN 1 ELSE 0 END) + \n    SUM(CASE WHEN weatherdelay > 0 THEN 1 ELSE 0 END) +\n    SUM(CASE WHEN nasdelay > 0 THEN 1 ELSE 0 END) +\n    SUM(CASE WHEN securitydelay > 0 THEN 1 ELSE 0 END) +\n    SUM(CASE WHEN lateaircraftdelay > 0 THEN 1 ELSE 0 END) AS Total_Delays\nFROM \n    df\nGROUP BY \n    season\nORDER BY \n    season;",
                "WorkGroup": "pipeline1",
                "QueryExecutionContext": {
                  "Catalog": "AwsDataCatalog",
                  "Database": "pipeline1-database"
                },
                "ResultConfiguration": {
                  "OutputLocation": "s3://airtime-historical-data/pipeline-1-athena/"
                }
              },
              "ResultSelector": {
                "QueryExecutionId.$": "$.QueryExecutionId"
              },
              "ResultPath": "$.AthenaQuery7Result",
              "Next": "Check Athena Query 6 Status"
            },
            "Check Athena Query 6 Status": {
              "Type": "Task",
              "Resource": "arn:aws:states:::athena:getQueryExecution",
              "Parameters": {
                "QueryExecutionId.$": "$.AthenaQuery7Result.QueryExecutionId"
              },
              "ResultPath": "$.AthenaQuery7Status",
              "Next": "Is Athena Query 6 Complete?"
            },
            "Is Athena Query 6 Complete?": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.AthenaQuery7Status.QueryExecution.Status.State",
                  "StringEquals": "SUCCEEDED",
                  "Next": "Athena Query 6 Complete"
                },
                {
                  "Variable": "$.AthenaQuery7Status.QueryExecution.Status.State",
                  "StringEquals": "FAILED",
                  "Next": "Athena Query 6 Failed"
                }
              ],
              "Default": "Wait Before Checking Athena Query 6 Status Again"
            },
            "Wait Before Checking Athena Query 6 Status Again": {
              "Type": "Wait",
              "Seconds": 10,
              "Next": "Check Athena Query 6 Status"
            },
            "Athena Query 6 Failed": {
              "Type": "Fail",
              "Error": "AthenaQuery7Failed",
              "Cause": "Athena Query 6 execution failed."
            },
            "Athena Query 6 Complete": {
              "Type": "Succeed"
            }
          }
        },
        {
          "StartAt": "Run Athena Query 7",
          "States": {
            "Run Athena Query 7": {
              "Type": "Task",
              "Resource": "arn:aws:states:::athena:startQueryExecution",
              "Parameters": {
                "QueryString": "CREATE OR REPLACE VIEW avg_delay_length_by_season AS\nSELECT \n    season,\n    AVG(totaldelay) AS Avg_Total_Delay,\n    AVG(carrierdelay) AS Avg_Carrier_Delay,\n    AVG(weatherdelay) AS Avg_Weather_Delay,\n    AVG(nasdelay) AS Avg_NAS_Delay,\n    AVG(securitydelay) AS Avg_Security_Delay,\n    AVG(lateaircraftdelay) AS Avg_Late_Aircraft_Delay\nFROM \n    df\nGROUP BY \n    season\nORDER BY \n    season;",
                "WorkGroup": "pipeline1",
                "QueryExecutionContext": {
                  "Catalog": "AwsDataCatalog",
                  "Database": "pipeline1-database"
                },
                "ResultConfiguration": {
                  "OutputLocation": "s3://airtime-historical-data/pipeline-1-athena/"
                }
              },
              "ResultSelector": {
                "QueryExecutionId.$": "$.QueryExecutionId"
              },
              "ResultPath": "$.AthenaQuery8Result",
              "Next": "Check Athena Query 7 Status"
            },
            "Check Athena Query 7 Status": {
              "Type": "Task",
              "Resource": "arn:aws:states:::athena:getQueryExecution",
              "Parameters": {
                "QueryExecutionId.$": "$.AthenaQuery8Result.QueryExecutionId"
              },
              "ResultPath": "$.AthenaQuery8Status",
              "Next": "Is Athena Query 7 Complete?"
            },
            "Is Athena Query 7 Complete?": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.AthenaQuery8Status.QueryExecution.Status.State",
                  "StringEquals": "SUCCEEDED",
                  "Next": "Athena Query 7 Complete"
                },
                {
                  "Variable": "$.AthenaQuery8Status.QueryExecution.Status.State",
                  "StringEquals": "FAILED",
                  "Next": "Athena Query 7 Failed"
                }
              ],
              "Default": "Wait Before Checking Athena Query 7 Status Again"
            },
            "Wait Before Checking Athena Query 7 Status Again": {
              "Type": "Wait",
              "Seconds": 10,
              "Next": "Check Athena Query 7 Status"
            },
            "Athena Query 7 Failed": {
              "Type": "Fail",
              "Error": "AthenaQuery8Failed",
              "Cause": "Athena Query 7 execution failed."
            },
            "Athena Query 7 Complete": {
              "Type": "Succeed"
            }
          }
        },
        {
          "StartAt": "Run Athena Query 8",
          "States": {
            "Run Athena Query 8": {
              "Type": "Task",
              "Resource": "arn:aws:states:::athena:startQueryExecution",
              "Parameters": {
                "QueryString": "CREATE OR REPLACE VIEW daily_total_delays AS\nSELECT \n    dayofmonth,\n    SUM(CASE WHEN carrierdelay > 0 THEN 1 ELSE 0 END) AS Carrier_Delay,\n    SUM(CASE WHEN weatherdelay > 0 THEN 1 ELSE 0 END) AS Weather_Delay,\n    SUM(CASE WHEN nasdelay > 0 THEN 1 ELSE 0 END) AS NAS_Delay,\n    SUM(CASE WHEN securitydelay > 0 THEN 1 ELSE 0 END) AS Security_Delay,\n    SUM(CASE WHEN lateaircraftdelay > 0 THEN 1 ELSE 0 END) AS Late_Aircraft_Delay,\n    SUM(CASE WHEN carrierdelay > 0 THEN 1 ELSE 0 END) + \n    SUM(CASE WHEN weatherdelay > 0 THEN 1 ELSE 0 END) + \n    SUM(CASE WHEN nasdelay > 0 THEN 1 ELSE 0 END) + \n    SUM(CASE WHEN securitydelay > 0 THEN 1 ELSE 0 END) + \n    SUM(CASE WHEN lateaircraftdelay > 0 THEN 1 ELSE 0 END) AS Total_No_Delays\nFROM \n    df\nGROUP BY \n    dayofmonth\nORDER BY \n    dayofmonth;",
                "WorkGroup": "pipeline1",
                "QueryExecutionContext": {
                  "Catalog": "AwsDataCatalog",
                  "Database": "pipeline1-database"
                },
                "ResultConfiguration": {
                  "OutputLocation": "s3://airtime-historical-data/pipeline-1-athena/"
                }
              },
              "ResultSelector": {
                "QueryExecutionId.$": "$.QueryExecutionId"
              },
              "ResultPath": "$.AthenaQuery9Result",
              "Next": "Check Athena Query 8 Status"
            },
            "Check Athena Query 8 Status": {
              "Type": "Task",
              "Resource": "arn:aws:states:::athena:getQueryExecution",
              "Parameters": {
                "QueryExecutionId.$": "$.AthenaQuery9Result.QueryExecutionId"
              },
              "ResultPath": "$.AthenaQuery9Status",
              "Next": "Is Athena Query 8 Complete?"
            },
            "Is Athena Query 8 Complete?": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.AthenaQuery9Status.QueryExecution.Status.State",
                  "StringEquals": "SUCCEEDED",
                  "Next": "Athena Query 8 Complete"
                },
                {
                  "Variable": "$.AthenaQuery9Status.QueryExecution.Status.State",
                  "StringEquals": "FAILED",
                  "Next": "Athena Query 8 Failed"
                }
              ],
              "Default": "Wait Before Checking Athena Query 8 Status Again"
            },
            "Wait Before Checking Athena Query 8 Status Again": {
              "Type": "Wait",
              "Seconds": 10,
              "Next": "Check Athena Query 8 Status"
            },
            "Athena Query 8 Failed": {
              "Type": "Fail",
              "Error": "AthenaQuery9Failed",
              "Cause": "Athena Query 8 execution failed."
            },
            "Athena Query 8 Complete": {
              "Type": "Succeed"
            }
          }
        }
      ],
      "Next": "Flow Complete"
    },
    "Flow Complete": {
      "Type": "Succeed"
    }
  }
}